// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------------------------
// Enums
// -------------------------------------------
enum SubscriptionTier {
  BASE
  ESSENTIAL
  PREMIUM
}

// A single enum for role
enum Role {
  ADMIN
  USER
  MANAGER
  WAITER
  ACCOUNTANT
  // etc...
}

// -------------------------------------------
// Models
// -------------------------------------------

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // NextAuth typically identifies users by email
  // so you often want it to be unique
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  name          String
  jobTitle      String?
  businessName  String?
  password      String?

  phone String?

  // Role (one per user)
  role Role @default(USER)

  // Basic user meta
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  lastLogin  DateTime?
  loginCount Int       @default(0)
  totalPaid  Decimal   @default(0.0)
  isActive   Boolean   @default(true)

  // Inline user settings & notifications
  language                String? // e.g., "en", "fr"
  orderNotification       Boolean @default(true)
  feedbackNotification    Boolean @default(true)
  integrationNotification Boolean @default(true)
  reservationNotification Boolean @default(true)
  smsNotification         Boolean @default(false)
  emailNotification       Boolean @default(true)

  // Arrays for staff & add-ons

  addOns String[]

  // Addresses, Subscriptions, Payments
  address       Json?          @db.Json
  subscriptions Subscription[]
  payments      Payment[]
  account       Account[]
  session       Session[]
}

model Subscription {
  id        String           @id @default(cuid())
  tier      SubscriptionTier
  startDate DateTime         @default(now())
  endDate   DateTime?
  isActive  Boolean          @default(true)

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  payments Payment[]
}

model Payment {
  id            String   @id @default(cuid())
  amount        Decimal  @default(0.0)
  paidAt        DateTime @default(now())
  description   String?
  paymentMethod String?

  // Payment belongs to a User
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  // (Optional) Payment belongs to a Subscription
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_userId_user_id_fk")

  @@id([provider, providerAccountId], map: "account_provider_providerAccountId_pk")
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_userId_user_id_fk")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
