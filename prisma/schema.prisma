generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------------------------
// Enums
// -------------------------------------------
enum SubscriptionTier {
  BASE
  ESSENTIAL
  PREMIUM
}

enum Role {
  ADMIN
  USER
  MANAGER
  WAITER
  ACCOUNTANT
  // etc...
}

// -------------------------------------------
// Models
// -------------------------------------------
model User {
  id                      String         @id @default(cuid())
  email                   String         @unique
  emailVerified           DateTime?      @map("email_verified")
  image                   String?
  name                    String
  jobTitle                String?
  businessName            String?
  password                String?
  phone                   String?
  role                    Role           @default(USER)
  createdAt               DateTime       @default(now()) @db.Timestamp(6)
  lastLogin               DateTime?
  loginCount              Int            @default(0)
  totalPaid               Decimal        @default(0.0)
  isActive                Boolean        @default(true)
  language                String? // e.g., "en", "fr"
  orderNotification       Boolean        @default(true)
  feedbackNotification    Boolean        @default(true)
  integrationNotification Boolean        @default(true)
  reservationNotification Boolean        @default(true)
  smsNotification         Boolean        @default(false)
  emailNotification       Boolean        @default(true)
  profileComplete         Boolean        @default(false)
  addOns                  String[]
  address                 Json?          @db.Json
  subscriptions           Subscription[]
  payments                Payment[]
  accounts                Account[] // renamed from "account"
  sessions                Session[] // renamed from "session"

  @@map("users")
}

model Subscription {
  id        String           @id @default(cuid())
  tier      SubscriptionTier
  startDate DateTime         @default(now())
  endDate   DateTime?
  isActive  Boolean          @default(true)

  // Relation to User: note the plain String userId
  user   User   @relation(fields: [userId], references: [id])
  userId String

  payments Payment[]
}

model Payment {
  id            String   @id @default(cuid())
  amount        Decimal  @default(0.0)
  paidAt        DateTime @default(now())
  description   String?
  paymentMethod String?

  // Payment belongs to a User
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // (Optional) Payment belongs to a Subscription
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
