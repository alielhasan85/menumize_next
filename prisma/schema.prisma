// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------------------------
// Enums
// -------------------------------------------
enum SubscriptionTier {
  BASE
  ESSENTIAL
  PREMIUM
}

// A single enum for role
enum Role {
  ADMIN
  USER
  MANAGER
  WAITER
  ACCOUNTANT
  // etc...
}

// -------------------------------------------
// Models
// -------------------------------------------

model User {
  id String @id @default(cuid())

  // NextAuth typically identifies users by email
  // so you often want it to be unique
  email        String? @unique
  name         String
  jobTitle     String?
  businessName String?

  phone String?

  // Role (one per user)
  role Role @default(USER)

  // Basic user meta
  createdAt  DateTime  @default(now())
  lastLogin  DateTime?
  loginCount Int       @default(0)
  totalPaid  Decimal   @default(0.0)
  isActive   Boolean   @default(true)

  // Inline user settings & notifications
  language                String? // e.g., "en", "fr"
  orderNotification       Boolean @default(true)
  feedbackNotification    Boolean @default(true)
  integrationNotification Boolean @default(true)
  reservationNotification Boolean @default(true)
  smsNotification         Boolean @default(false)
  emailNotification       Boolean @default(true)

  // Arrays for staff & add-ons
  staff  String[]
  addOns String[]

  // Addresses, Subscriptions, Payments
  addresses     Address[]
  subscriptions Subscription[]
  payments      Payment[]
}

model Address {
  id         String  @id @default(cuid())
  street     String?
  city       String?
  state      String?
  postalCode String?
  country    String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Subscription {
  id        String           @id @default(cuid())
  tier      SubscriptionTier
  startDate DateTime         @default(now())
  endDate   DateTime?
  isActive  Boolean          @default(true)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  payments Payment[]
}

model Payment {
  id            String   @id @default(cuid())
  amount        Decimal  @default(0.0)
  paidAt        DateTime @default(now())
  description   String?
  paymentMethod String?

  // Payment belongs to a User
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // (Optional) Payment belongs to a Subscription
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
}
